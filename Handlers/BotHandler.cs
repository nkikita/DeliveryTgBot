using System.Collections.Concurrent;
namespace DeliveryTgBot.Handlers
{
    public class BotHandler
    {
        private readonly ITelegramService _telegramService;
        private readonly IDriverService _driverService;
        private readonly IOrderCacheService _orderCacheService;
        private readonly ICityService _cityService;
        private readonly ICalendarService _calendarService;
        private readonly IAddressService _addressService;
        private readonly IKeyboardBuilder _keyboardTGBuilder;
        private readonly IOrderService _orderService;
        private readonly IOrderNotificationService _orderNotificationService;
        private readonly ConcurrentDictionary<long, bool> _waitingForComment = new ConcurrentDictionary<long, bool>();
        private readonly ConcurrentDictionary<long, Dictionary<string, string>> _userAddressMaps = new();
         private readonly ConcurrentDictionary<long, int> _addressKeyboardMessageIds = new();

        public BotHandler(
            ITelegramService telegramService,
            IDriverService driverService,
            IOrderService orderService,
            IOrderCacheService orderCacheService,
            ICityService cityService,
            ICalendarService calendarService,
            IOrderNotificationService orderNotificationService,
            IKeyboardBuilder keyboardBuilder,
            IAddressService addressService)
        {
            _telegramService = telegramService;
            _driverService = driverService;
            _orderCacheService = orderCacheService;
            _cityService = cityService;
            _orderService = orderService;
            _calendarService = calendarService;
            _orderNotificationService = orderNotificationService;
            _addressService = addressService;
            _keyboardTGBuilder = keyboardBuilder;
        }
        private static bool IsOrderComplete(Order order)
        {
                Console.WriteLine("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ ===");
                Console.WriteLine($"CityId: {order.CityId}");
                Console.WriteLine($"Volume: {order.Volume}");
                Console.WriteLine($"VehiclesCount: {order.VehiclesCount}");
                Console.WriteLine($"AssignedDriverId: {order.AssignedDriverId}");
                Console.WriteLine($"DeliveryDateTime: {order.DeliveryDateTime}");
                Console.WriteLine($"CommentFromUsers: {(order.CommentFromUsers == null ? "null" : $"'{order.CommentFromUsers}'")}");
                Console.WriteLine($"DeliveryAdress: {(order.DeliveryAdress == null ? "null" : $"'{order.DeliveryAdress}'")}");
                Console.WriteLine("======================");
            return order.CityId != null
                && order.Volume > 0
                && order.VehiclesCount > 0
                && order.AssignedDriverId != null
                && order.DeliveryDateTime != default
                && order.CommentFromUsers != null
                && order.DeliveryAdress != null;
        }
        public async Task HandleAddressQueryAsync(long chatId, string query)
        {
            var currentOrder = await _orderCacheService.GetOrCreateOrderAsync(chatId);

            if (string.IsNullOrEmpty(currentOrder.City.CityName))
            {
                await _telegramService.SendTextMessageAsync(chatId, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.");
                return;
            }

            var suggestions = await _addressService.GetAddressSuggestionsAsync(query, currentOrder.City.CityName);

            if (suggestions.Count == 0)
            {
                await _telegramService.SendTextMessageAsync(chatId, "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.");
                return;
            }
              var (keyboard, map) = _keyboardTGBuilder.BuildAddressKeyboard(suggestions);
            _userAddressMaps[chatId] = map;
            await _telegramService.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", replyMarkup: keyboard);
            
        }
        public async Task HandleAddressSelectionAsync(long chatId, string selectedAddress)
        {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
            var currentOrder = await _orderCacheService.GetOrCreateOrderAsync(chatId);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
            currentOrder.DeliveryAdress = selectedAddress;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—ç—à–µ –∏ –≤ –±–∞–∑–µ
            await _orderCacheService.SaveOrderAsync(currentOrder);
            await _orderService.SaveOrderAsync(currentOrder);
           


            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await _telegramService.SendTextMessageAsync(chatId, $"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å: {selectedAddress}");
            if (IsOrderComplete(currentOrder))
            {
                await _telegramService.SendTextMessageAsync(chatId, "‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–æ–¥–∏—Ç–µ–ª—é...");
                await _orderNotificationService.NotifyDriverAsync(currentOrder);
            }
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
            // await _telegramService.SendTextMessageAsync(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏...");
        }

      
        public async Task HandleUpdateAsync(Update update)
        {
            Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update.Type} –æ—Ç {update.Message?.Chat.Id ?? update.CallbackQuery?.Message.Chat.Id}");
            var cities = await _cityService.GetAllCitiesAsync();

            var CityButtons = cities
                .Select(c => new[] { InlineKeyboardButton.WithCallbackData(c.CityName, $"city_{c.Id}") })
                .ToList();

            var CityButtons3 = new InlineKeyboardMarkup(CityButtons);
            if (update.Type == UpdateType.Message && update.Message?.Text != null)
            {
                var chatId = update.Message.Chat.Id;
                var text = update.Message.Text;
                var currentOrder = await _orderCacheService.GetOrCreateOrderAsync(chatId);
                
                    if (_waitingForComment.TryGetValue(chatId, out var isWaiting) && isWaiting)
                    {
                        var comment = text.Trim();
                        if (comment == "-") comment = string.Empty;

                        currentOrder.CommentFromUsers = comment;

                        await _orderCacheService.SaveOrderAsync(currentOrder);
                        await _orderService.SaveOrderAsync(currentOrder);

                        _waitingForComment.TryRemove(chatId, out _);

                        await _telegramService.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä: –õ–µ–Ω–∏–Ω–∞ 12):");

                        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º HandleAddressQueryAsync –∑–¥–µ—Å—å ‚Äî –∂–¥–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç –∞–¥—Ä–µ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
                        return;
                    }

                if (currentOrder.CommentFromUsers != null && currentOrder.DeliveryAdress == null)
                {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å (—Ç–µ–∫—Å—Ç)
                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await HandleAddressQueryAsync(chatId, text);
                    return;
                }

                if (text == "/reset")
                {
                    await _orderCacheService.ResetOrderAsync(chatId);
                    await _telegramService.SendTextMessageAsync(chatId, "üîÑ –ê–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. üèôÔ∏è:", CityButtons3);
                    return;
                }
                else if (text == "/start")
                {
                    await _orderCacheService.ResetOrderAsync(chatId);
                    await _telegramService.SendTextMessageAsync(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. üåç:", CityButtons3);
                    return;
                }
                
                else
                {
                    // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    await _orderCacheService.SaveOrderAsync(currentOrder);
                }

                Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç {chatId}: {text}");
                if (currentOrder.DeliveryDateTime.Date != default)
                {
                    Console.WriteLine($"DEBUG: currentOrder = {System.Text.Json.JsonSerializer.Serialize(currentOrder)}");
                    if (TimeSpan.TryParse(text, out var time))
                    {
                        var date = currentOrder.DeliveryDateTime.Date;
                        var combined = date.Add(time);
                        currentOrder.DeliveryDateTime = DateTime.SpecifyKind(combined, DateTimeKind.Unspecified);

                        await _orderCacheService.SaveOrderAsync(currentOrder);

                        await _telegramService.SendTextMessageAsync(chatId,
                            $"üìÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {currentOrder.DeliveryDateTime:yyyy-MM-dd HH:mm}. –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ! ‚û°Ô∏è");
                        _waitingForComment[chatId] = true;
                        currentOrder.ClientTelegramUsername = update.Message.From.Username;

                        await _telegramService.SendTextMessageAsync(chatId, "üí¨ –ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è? –ù–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∑–¥–µ—Å—å. –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' (–º–∏–Ω—É—Å). ‚úçÔ∏è:");
                    }
                    else
                    {
                        await _telegramService.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú");
                    }
                    return;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ –ø–æ CityId, –ù–ï –ø–æ currentOrder.City (–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å null)
                if (currentOrder.Volume == 0)
                {
                    if (double.TryParse(text, out var volume))
                    {
                        currentOrder.Volume = volume;
                        await _orderCacheService.SaveOrderAsync(currentOrder);
                        await _telegramService.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ:");
                    }
                    else
                    {
                        await _telegramService.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –æ–±—ä–µ–º–∞.");
                    }
                    return;
                }
                if (currentOrder.VehiclesCount == 0)
                {
                    if (int.TryParse(text, out var count))
                    {
                        currentOrder.VehiclesCount = count;

                        if (IsOrderComplete(currentOrder))
                        {
                            await _orderService.SaveOrderAsync(currentOrder);
                            await _telegramService.SendTextMessageAsync(chatId, "–í–∞—à –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                        }
                        else
                        {
                            await _orderCacheService.SaveOrderAsync(currentOrder);

                            if (currentOrder.CityId == null)
                            {
                                await _telegramService.SendTextMessageAsync(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.", CityButtons3);
                                return;
                            }

                            var drivers = await _driverService.GetAvailableDriversAsync(currentOrder.CityId.Value, currentOrder.Volume, currentOrder.VehiclesCount);
                            if (!drivers.Any())
                            {
                                await _telegramService.SendTextMessageAsync(chatId, "üòï –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–¥ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∑–∂–µ.");
                                return;
                            }

                            var buttons = drivers.Select(d =>
                                new[] { InlineKeyboardButton.WithCallbackData($"{d.Name} - {d.PricePerVolume}‚ÇΩ", $"driver_{d.Id}") }
                            ).ToList();
                            var markup = new InlineKeyboardMarkup(buttons);

                            await _telegramService.SendTextMessageAsync(chatId, "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:", markup);
                        }
                    }
                    else
                    {
                        await _telegramService.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ.");
                    }
                    return;
                }
            }
            else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery != null)
            {
                var today = DateTime.Today;
                var callback = update.CallbackQuery;
                var chatId = callback.Message.Chat.Id;
                var data = callback.Data;
                var currentOrder = await _orderCacheService.GetOrCreateOrderAsync(chatId);

            
                if (data.StartsWith("addr_"))
                {
                    if (_userAddressMaps.TryGetValue(chatId, out var map))
                    {
                        if (map.TryGetValue(data, out var selectedAddress))
                        {
                            await HandleAddressSelectionAsync(chatId, selectedAddress);
                            return;
                        }
                    }
                }

              /*  if (CallbackHelper.IsAddressCallback(data))
                {
                    Console.WriteLine("–ü–†–û–í–ï–†–ö–ê –õ–û–ì–ê –í–´–í–û–î–ê –ê–î–†–ï–°–ê");
                    await HandleAddressSelectionAsync(chatId, data);
                    return;
                }
              */  
                if (data.StartsWith("city_") || data.StartsWith(new RequestDateInfo().KeyWord) || data.StartsWith("driver_"))
                {
                    await _telegramService.EditMessageReplyMarkupAsync(
                        chatId,
                        callback.Message.MessageId,
                        replyMarkup: null);
                }
                if (data.StartsWith("city_"))
                {
                    var cityIdStr = data.Replace("city_", "");
                    if (int.TryParse(cityIdStr, out var cityId))
                    {
                        var selectedCity = cities.FirstOrDefault(c => c.Id == cityId);

                        if (selectedCity != null)
                        {
                            currentOrder.CityId = selectedCity.Id;
                            // –ù–ï —Ç—Ä–æ–≥–∞–µ–º currentOrder.City –Ω–∞–ø—Ä—è–º—É—é ‚Äî EF —Å–∞–º –ø–æ–¥—Ç—è–Ω–µ—Ç –ø–æ CityId –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                            await _orderCacheService.SaveOrderAsync(currentOrder);

                           await _telegramService.SendTextMessageAsync(chatId, $"üìç –û—Ç–ª–∏—á–Ω–æ, –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ ‚Äî {selectedCity.CityName}.\n–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–∑–∞(—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5):");
                        }
                    }
                    return;
                }

                if (data.StartsWith(new RequestDateInfo().KeyWord))
                {
                    var dateStr = data.Substring(new RequestDateInfo().KeyWord.Length, 8);
                    if (DateTime.TryParseExact(dateStr, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out var date))
                    {
                        if (date < DateTime.Today)
                        {
                            await _telegramService.SendTextMessageAsync(chatId,
                                                "‚ö†Ô∏è –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∏–ª–∏ –ø–æ–∑–∂–µ.",
                                                replyMarkup: InlineCalendarFactory.GetKeyboard(today, 0));

                            return; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –¥–∞—Ç–∞ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
                        }

                        currentOrder.DeliveryDateTime = DateTime.SpecifyKind(date, DateTimeKind.Unspecified);
                        await _orderCacheService.SaveOrderAsync(currentOrder);

                        await _telegramService.SendTextMessageAsync(chatId, $"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏: {date:yyyy-MM-dd}. \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–ß–ß:–ú–ú)");
                    }
                    return;
                }

                if (data.StartsWith(new RequestPreviousMonthInfo().KeyWord))
                {
                    DateTime currentMonth =_calendarService.GetDateFromCallback(callback.Data);
                    DateTime previousMonth = currentMonth.AddMonths(-1);

                    await _telegramService.EditMessageReplyMarkupAsync(
                        chatId: callback.Message.Chat.Id,
                        messageId: callback.Message.MessageId,
                        replyMarkup: InlineCalendarFactory.GetKeyboard(previousMonth, callback.Message.MessageId)
                    );
                }
                if (data.StartsWith(new RequestNextMonthInfo().KeyWord))
                {
                    DateTime currentMonth = _calendarService.GetDateFromCallback(callback.Data);
                    DateTime nextMonth = currentMonth.AddMonths(1);

                    await _telegramService.EditMessageReplyMarkupAsync(
                        chatId: callback.Message.Chat.Id,
                        messageId: callback.Message.MessageId,
                        replyMarkup: InlineCalendarFactory.GetKeyboard(nextMonth, callback.Message.MessageId)
                    );
                }

                if (data.StartsWith("driver_"))
                {
                    var driverIdStr = data.Replace("driver_", "");
                    if (Guid.TryParse(driverIdStr, out var driverId))
                    {
                        currentOrder.AssignedDriverId = driverId;
                        await _orderCacheService.SaveOrderAsync(currentOrder);

                        var keyboard = InlineCalendarFactory.GetKeyboard(today, 0);
                        await _telegramService.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", keyboard);
                    }
                    return;
                }
            }
        }
    }
}