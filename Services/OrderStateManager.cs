using DeliveryTgBot.Interfaces;
using DeliveryTgBot.Models;

namespace DeliveryTgBot.Services
{
    public class OrderStateManager : IOrderStateManager
    {
        private readonly ITelegramService _telegramService;
        private readonly IOrderService _orderService;
        private readonly IDriverService _driverService;
        private readonly IOrderNotificationService _orderNotificationService;

        public OrderStateManager(
            ITelegramService telegramService,
            IOrderService orderService,
            IDriverService driverService,
            IOrderNotificationService orderNotificationService)
        {
            _telegramService = telegramService;
            _orderService = orderService;
            _driverService = driverService;
            _orderNotificationService = orderNotificationService;
        }

        public async Task<bool> ProcessOrderStateAsync(Order order, string input)
        {
            // Handle volume input
            if (order.Volume == 0)
            {
                if (double.TryParse(input, out var volume))
                {
                    order.Volume = volume;
                    return true;
                }
                await _telegramService.SendTextMessageAsync(order.ClientTelegramId, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –æ–±—ä–µ–º–∞.");
                return false;
            }

            // Handle vehicles count input
            if (order.VehiclesCount == 0)
            {
                if (int.TryParse(input, out var count))
                {
                    order.VehiclesCount = count;
                    return true;
                }
                await _telegramService.SendTextMessageAsync(order.ClientTelegramId, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ.");
                return false;
            }

            // Handle time input when date is set
            if (order.DeliveryDateTime.Date != default && order.DeliveryDateTime.TimeOfDay == default)
            {
                if (TimeSpan.TryParse(input, out var time))
                {
                    var date = order.DeliveryDateTime.Date;
                    var combined = date.Add(time);
                    order.DeliveryDateTime = DateTime.SpecifyKind(combined, DateTimeKind.Unspecified);
                    return true;
                }
                await _telegramService.SendTextMessageAsync(order.ClientTelegramId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú");
                return false;
            }

            return false;
        }

        public async Task<bool> IsOrderCompleteAsync(Order order)
        {
            var isComplete = order.CityId != null
                && order.Volume > 0
                && order.VehiclesCount > 0
                && order.AssignedDriverId != null
                && order.DeliveryDateTime != default
                && order.CommentFromUsers != null
                && order.DeliveryAdress != null;

            if (isComplete)
            {
                await _telegramService.SendTextMessageAsync(order.ClientTelegramId, "‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–æ–¥–∏—Ç–µ–ª—é...");
                await _orderNotificationService.NotifyDriverAsync(order);
            }

            return isComplete;
        }

        public async Task<string> GetNextPromptAsync(Order order)
        {
            if (order.Volume == 0)
            {
                return "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–∑–∞(—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5):";
            }

            if (order.VehiclesCount == 0)
            {
                return "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ:";
            }

            if (order.AssignedDriverId == null)
            {
                var drivers = await _driverService.GetAvailableDriversAsync(order.CityId.Value, order.Volume, order.VehiclesCount);
                if (!drivers.Any())
                {
                    return "üòï –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–¥ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∑–∂–µ.";
                }
                return "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:";
            }

            if (order.DeliveryDateTime.Date == default)
            {
                return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:";
            }

            if (order.DeliveryDateTime.TimeOfDay == default)
            {
                return "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–ß–ß:–ú–ú)";
            }

            if (order.CommentFromUsers == null)
            {
                return "üí¨ –ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è? –ù–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∑–¥–µ—Å—å. –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' (–º–∏–Ω—É—Å). ‚úçÔ∏è:";
            }

            if (order.DeliveryAdress == null)
            {
                return "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä: –õ–µ–Ω–∏–Ω–∞ 12):";
            }

            return "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!";
        }
    }
}
